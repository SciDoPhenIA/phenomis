% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allGenerics.R, R/filtering.R
\name{filtering}
\alias{filtering}
\alias{filtering,MultiDataSet-method}
\alias{filtering,ExpressionSet-method}
\title{Filtering of the features (or samples) with a high proportion of NAs or a low variance}
\usage{
filtering(
  x,
  max_na_prop.n = 0.2,
  min_variance.n = .Machine$double.eps,
  dims.vc = c("samples", "features"),
  report.c = c("none", "interactive", "myfile.txt")[2]
)

\S4method{filtering}{MultiDataSet}(
  x,
  max_na_prop.n = 0.2,
  min_variance.n = .Machine$double.eps,
  dims.vc = c("samples", "features"),
  report.c = c("none", "interactive", "myfile.txt")[2]
)

\S4method{filtering}{ExpressionSet}(
  x,
  max_na_prop.n = 0.2,
  min_variance.n = .Machine$double.eps,
  dims.vc = c("samples", "features"),
  report.c = c("none", "interactive", "myfile.txt")[2]
)
}
\arguments{
\item{x}{An S4 object of class \code{ExpressionSet} or \code{MultiDataSet}}

\item{max_na_prop.n}{Numeric: maximum proportion of NAs for a sample (or feature)
to be kept [default: 0.2]}

\item{min_variance.n}{Numeric: minimum variance for a sample (or feature) to be kept
[default: .Machine$double.eps]}

\item{dims.vc}{Vector of one or two characters: dimension(s) to which the
filtering should be applied; either 'samples', 'features', or c('samples', 'features')}

\item{report.c}{Character: File name with '.txt' extension for the printed
results (call to sink()'); if 'interactive' (default), messages will be
printed on the screen; if 'none', no verbose will be generated}
}
\value{
\code{ExpressionSet} or \code{MultiDataSet} including the exprs matrix
(list of matrices) with transformed intensities
}
\description{
Filtering of the features (or samples) with a high proportion of NAs or a low variance
}
\examples{
sacurine.eset <- phenomis::reading(system.file("extdata/sacurine", package = "phenomis"))
exprs.mn <- Biobase::exprs(sacurine.eset)
ropls::view(exprs.mn)
phenomis::filtering(sacurine.eset)
exprs.mn[exprs.mn < 1e5] <- NA
ropls::view(exprs.mn)
Biobase::exprs(sacurine.eset) <- exprs.mn
phenomis::filtering(sacurine.eset)
# MultiDataSet
prometis.mset <- phenomis::reading(system.file("extdata/prometis", package="phenomis"))
phenomis::filtering(prometis.mset)
for (set.c in names(prometis.mset)) {
eset <- prometis.mset[[set.c]]
exprs.mn <- Biobase::exprs(eset)
exprs.mn[exprs.mn < quantile(c(exprs.mn), 0.2)] <- NA
Biobase::exprs(eset) <- exprs.mn
prometis.mset <- MultiDataSet::add_eset(prometis.mset, eset, dataset.type = set.c,
                                        GRanges = NA, overwrite = TRUE, warnings = FALSE)
}
phenomis::filtering(prometis.mset)
}
